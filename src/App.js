import React, { useState, useEffect } from 'react';
import { BookOpen, Target, BrainCircuit, ShieldCheck, BarChart2, Star, Clock, Calendar, Users, Award, Flame, TrendingUp, Settings, Lightbulb, XCircle, CheckCircle, ArrowRight, Zap, BookCopy, TestTube2, Trophy, HelpCircle, ArrowLeft, Video, Gamepad2, ChevronsRight, Baby, Loader2, Flag, Send, Crown, Sparkles, User, Bell, Download, AlertTriangle, Brain, Repeat, Wand2, LineChart, Coffee, Heart } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const firebaseConfig = {
  apiKey: "AIzaSyAbwKVJLPVAJDV6W4n61N6Aczh9bNmX964",
  authDomain: "nbhwc-study-platform.firebaseapp.com",
  projectId: "nbhwc-study-platform",
  storageBucket: "nbhwc-study-platform.firebasestorage.app",
  messagingSenderId: "579374591514",
  appId: "1:579374591514:web:a26baa11f7e343d9ceaba3",
  measurementId: "G-Z7HWYEFM2K"
};

// --- STATIC CONTENT (remains in code) ---
const allMockQuestions = [ { id: 'q1', question: "Which of the following is a core component of Motivational Interviewing?", options: ["Giving direct advice", "Expressing empathy", "Challenging the client's beliefs", "Setting goals for the client"], correctAnswer: "Expressing empathy", explanation: "Expressing empathy is a foundational skill in Motivational Interviewing (MI), as it helps build rapport and understanding.", source: "NBHWC Content Outline, II.A.2" }, { id: 'q2', question: "A client says, 'I want to eat healthier, but I have no time.' This is an example of:", options: ["Change talk", "Sustain talk", "Ambivalence", "A specific goal"], correctAnswer: "Ambivalence", explanation: "Ambivalence is the state of having mixed feelings. The client expresses a desire to change alongside a reason not to.", source: "NBHWC Coaching Competencies, B.3" }, { id: 'q3', question: "What is the primary purpose of 'powerful questioning' in coaching?", options: ["To gather information for the coach", "To test the client's knowledge", "To guide the client to a specific conclusion", "To evoke discovery and insight for the client"], correctAnswer: "To evoke discovery and insight for the client", explanation: "Powerful questions are open-ended and designed to help clients access their own inner wisdom.", source: "ICF Core Competencies" }, { id: 'q4', question: "The 'OARS' acronym in Motivational Interviewing stands for:", options: ["Observe, Ask, Reflect, Summarize", "Open Questions, Affirmations, Reflections, Summaries", "Objectives, Actions, Results, Sustainment", "Observe, Act, Review, Support"], correctAnswer: "Open Questions, Affirmations, Reflections, Summaries", explanation: "OARS represents the basic interaction techniques and skills used in MI.", source: "Miller & Rollnick, 'Motivational Interviewing, 3rd Ed.'" }, { id: 'q5', question: "Which type of reflection is best used to gently challenge a client's perspective?", options: ["Simple Reflection", "Amplified Reflection", "Double-Sided Reflection", "Feeling Reflection"], correctAnswer: "Amplified Reflection", explanation: "Amplified reflections overstate what the client has said, which can encourage the client to argue less for the status quo.", source: "NBHWC Content Outline, II.A.3" }, { id: 'q6', question: "In the context of coaching agreements, what does 'scope of practice' primarily refer to?", options: ["The number of sessions a coach can provide", "The geographical area where the coach can practice", "The specific services a coach is qualified and insured to provide", "The types of goals a coach is allowed to work on"], correctAnswer: "The specific services a coach is qualified and insured to provide", explanation: "Scope of practice defines the boundaries of a professional's role, ensuring they do not provide services (like medical advice or therapy) for which they are not qualified.", source: "NBHWC Ethical Guidelines" }, { id: 'q7', question: "A coach saying 'You've handled similar challenges successfully before' is an example of:", options: ["A powerful question", "An affirmation", "A summary", "A simple reflection"], correctAnswer: "An affirmation", explanation: "Affirmations are statements that recognize a client's strengths, efforts, and past successes, which helps build self-efficacy.", source: "NBHWC Coaching Competencies, B.2" }, { id: 'q8', question: "What is the 'righting reflex' that coaches are trained to resist?", options: ["The urge to correct a client's factual errors", "The tendency to immediately offer solutions or advice", "The reflex to end the session on a positive note", "The need to write down every detail the client says"], correctAnswer: "The tendency to immediately offer solutions or advice", explanation: "The righting reflex is the natural desire to 'fix' a problem for someone, which can be counterproductive in coaching as it undermines the client's autonomy.", source: "Miller & Rollnick, 'Motivational Interviewing, 3rd Ed.'" }, { id: 'q9', question: "Which of the following is NOT a defined NBHWC domain?", options: ["Coaching Structure", "Health & Wellness", "Business Development", "Coaching Process"], correctAnswer: "Business Development", explanation: "While important for a coaching practice, Business Development is not one of the four core domains tested on the NBHWC exam.", source: "NBHWC Exam Content Outline" }, { id: 'q10', question: "The 'S' in SMART goals stands for:", options: ["Simple", "Specific", "Strategic", "Sustainable"], correctAnswer: "Specific", explanation: "SMART goals are Specific, Measurable, Achievable, Relevant, and Time-bound. 'Specific' ensures the goal is well-defined and clear.", source: "Widely used goal-setting theory" }, { id: 'q11', question: "What is the primary purpose of a coaching agreement?", options: ["To guarantee client results", "To set clear expectations and boundaries for the coaching relationship", "To serve as a marketing tool", "To provide a summary of the client's health history"], correctAnswer: "To set clear expectations and boundaries for the coaching relationship", explanation: "The coaching agreement clarifies roles, responsibilities, confidentiality, and logistics to create a safe and professional container for the coaching.", source: "NBHWC Ethical Guidelines, Section 2" }, { id: 'q12', question: "A client consistently arrives late to sessions. What is the most appropriate first step for the coach?", options: ["Charge the client for the missed time", "Ignore it to avoid conflict", "Refer the client to a time management specialist", "Address the pattern with the client in a non-judgmental way"], correctAnswer: "Address the pattern with the client in a non-judgmental way", explanation: "The first step is to open a direct, non-judgmental dialogue to understand the reason for the lateness and co-create a solution, reinforcing the coaching agreement.", source: "Coaching professional standards" } ];
const studyContent = { "Coaching Process": { icon: <BrainCircuit className="w-8 h-8 text-green-400" />, color: "green", topics: [ { id: 'mi', title: "Motivational Interviewing (MI)", standard: "Motivational Interviewing is a collaborative, person-centered form of guiding to elicit and strengthen motivation for change. It is grounded in a respectful and empathetic approach, focusing on exploring and resolving ambivalence. The core principles are often remembered by the acronym RULE: Resist the righting reflex, Understand the client's motivation, Listen with empathy, and Empower the client.", eli5: "Imagine your friend wants to start exercising but also loves watching TV. Instead of telling them 'You have to exercise!', you'd say, 'It sounds like exercising is important to you, but you also really enjoy your TV time. What are your thoughts on that?' You're not pushing them; you're helping them figure out their own 'why' for changing. It's like being a helpful detective for their own motivation.", videoUrl: "https://example.com/mi_video", simulationId: null }, { id: 'al', title: "Active Listening", standard: "Active listening involves fully concentrating on what is being said rather than just passively 'hearing' the message of the speaker. It includes understanding the meaning and context, responding thoughtfully, and retaining the information. Key techniques include paraphrasing, summarizing, and reflecting feelings.", eli5: "Think of it like being a human mirror. When your friend talks, you don't just wait for your turn to speak. You reflect back what they said in your own words, like, 'So, it sounds like you felt really frustrated when that happened.' This shows them you're *really* listening and not just zoning out.", videoUrl: "https://example.com/al_video", simulationId: null }, { id: 'pq', title: "Powerful Questioning", standard: "Powerful questions are open-ended inquiries that evoke discovery, insight, new perspectives, and clarity. They avoid leading the client and are typically short and simple, prompting deep reflection rather than a simple 'yes' or 'no' answer. Examples include 'What's most important to you about this?' or 'What would success look like?'", eli5: "Instead of asking 'Did you have a good day?' (which gets a 'yes' or 'no'), you ask 'What was the most interesting part of your day?'. A powerful question is like a key that unlocks a treasure chest of thoughts in someone's brain, instead of just asking if the chest is locked.", videoUrl: "https://example.com/pq_video", simulationId: null } ] }, "Coaching Structure": { icon: <ShieldCheck className="w-8 h-8 text-blue-400" />, color: "blue", topics: [{ id: 'ca', title: "Coaching Agreements", standard: "The coaching agreement is a formal contract that establishes the professional relationship. It must clearly outline the coach's and client's responsibilities, fees, scheduling, confidentiality terms, and the coach's scope of practice. It serves as a foundational document for the entire coaching engagement.", eli5: "A coaching agreement is like the rules for a board game. Before you play, everyone agrees on what you can and can't do, how you win, and how long the game lasts. This makes sure everyone is on the same page and the game is fair.", videoUrl: null, simulationId: null }] }, "Health & Wellness": { icon: <Star className="w-8 h-8 text-yellow-400" />, color: "yellow", topics: [{ id: 'tm', title: "Transtheoretical Model of Change", standard: "The Transtheoretical Model (TTM) posits that individuals move through six stages of change: precontemplation, contemplation, preparation, action, maintenance, and termination. A coach's approach should be tailored to the client's current stage.", eli5: "Changing a habit is like climbing a ladder. First, you're on the ground not even thinking about climbing (precontemplation). Then you look up at the ladder (contemplation). Then you put your foot on the first rung (preparation). Then you start climbing (action) and keep going (maintenance) until you reach the top (termination). A coach helps you at every step of the ladder.", videoUrl: null, simulationId: null }] }, "Ethics, Legal & Professional": { icon: <BookOpen className="w-8 h-8 text-red-400" />, color: "red", topics: [{ id: 'sop', title: "Scope of Practice", standard: "A coach's scope of practice defines the services they are qualified to provide. It is critical to avoid providing medical advice, therapy, or prescriptive meal plans, which fall under the scope of other licensed professionals like dietitians or therapists. When a client asks for services outside this scope, the coach has an ethical responsibility to clarify their role and refer the client to an appropriate professional.", eli5: "A health coach is like a car's driving instructor. They can teach you how to use the car (your body) safely and effectively to get where you want to go. But if the car's engine is broken, you need a mechanic (a doctor or dietitian), not a driving instructor. Knowing when to say 'That's a job for a mechanic' is your scope of practice.", videoUrl: null, simulationId: "sim_scope_of_practice" }] }, };
const achievementDetails = { 'streak10': { name: "10-Day Streak", icon: <Flame /> }, 'domainMasterEthics': { name: "Domain Master: Ethics", icon: <Award /> }, 'comebackKid': { name: "Comeback Kid", icon: <TrendingUp /> }, 'knowledgeSeeker': { name: "Knowledge Seeker", icon: <BookOpen /> }, 'quizWhiz': { name: "Quiz Whiz", icon: <Zap /> } };
const simulations = { "sim_scope_of_practice": { title: "Ethical Dilemma: The Meal Plan Request", initial: "start", nodes: { "start": { text: "You are in a session with your client, Maria. She's been making great progress on her goal of incorporating more movement into her week. She says, 'This is going so well! I was wondering, could you just write me a 7-day meal plan to speed up my weight loss? I'd be happy to pay extra.'", choices: [ { text: "Agree to create the meal plan.", target: "agree" }, { text: "Politely decline and explain your role.", target: "decline_explain" }, { text: "Explore her motivation behind the request.", target: "explore" } ] }, "agree": { text: "You agree and tell Maria you'll have a full 7-day meal plan ready for her by the next session. She is thrilled.", outcome: { type: "incorrect", title: "Action: Agreed to create a meal plan.", feedback: "This is a significant ethical breach. Creating a prescriptive meal plan falls under the scope of a registered dietitian, not a health coach. While the client is happy in the short term, you have exposed yourself to legal risk and are not serving the client's best long-term interest in developing her own skills.", next: { text: "Review the outcome", target: "end_bad" } } }, "decline_explain": { text: "You tell Maria, 'I appreciate you asking, but creating specific meal plans is outside my scope of practice as a health coach. My role is to help you discover what works best for you, not to prescribe a diet.'", outcome: { type: "good", title: "Action: Declined and explained your role.", feedback: "This is a good, ethical response. You clearly and respectfully maintained your professional boundaries. However, you may have missed an opportunity to use this as a coaching moment to deepen your work with the client.", next: { text: "Continue the simulation", target: "explore" } } }, "explore": { text: "You decide to use a coaching approach. You ask, 'It's great that you're so motivated to see results. Can you tell me more about what a meal plan represents to you?' Maria explains she's just overwhelmed by food choices and wants something simple to follow.", choices: [ { text: "Help her brainstorm simple meal *ideas* and strategies.", target: "brainstorm" }, { text: "Refer her to a registered dietitian.", target: "refer" } ] }, "brainstorm": { text: "You work with Maria to brainstorm simple, healthy meal *templates* (e.g., 'protein + veggie + healthy carb') and strategies for meal prep that she can adapt herself. She feels empowered and leaves with concrete, actionable ideas that she created.", outcome: { type: "best", title: "Action: Brainstormed meal strategies.", feedback: "This is the ideal coaching response. You maintained your scope of practice while empowering the client to build her own skills and autonomy. You addressed her underlying need (feeling overwhelmed) without prescribing a solution.", next: { text: "Finish the simulation", target: "end_good" } } }, "refer": { text: "You acknowledge her feeling of being overwhelmed and say, 'It sounds like having that level of specific guidance would be really helpful. A registered dietitian is the perfect expert for that. I can help you find one if you'd like.'", outcome: { type: "good", title: "Action: Referred to a dietitian.", feedback: "This is a very safe and ethical response. You correctly identified that a dietitian is the appropriate professional and offered a referral. This is always a correct choice when a client's needs are outside your scope.", next: { text: "Finish the simulation", target: "end_good" } } }, "end_bad": { text: "You have completed the simulation. This scenario highlighted a critical ethical boundary. Review the NBHWC guidelines on Scope of Practice to solidify your understanding." }, "end_good": { text: "You have successfully navigated this ethical dilemma, maintaining your scope of practice while empowering your client. Excellent work!" } } } };
const memoryGameTerms = [ { id: 1, type: 'term', content: 'Rapport' }, { id: 1, type: 'definition', content: 'A close and harmonious relationship in which people understand each other.' }, { id: 2, type: 'term', content: 'Accountability' }, { id: 2, type: 'definition', content: 'The client\'s responsibility for their own progress and commitments.' }, { id: 3, type: 'term', content: 'Autonomy' }, { id: 3, type: 'definition', content: 'The client\'s capacity to be their own person and make their own choices.' }, { id: 4, type: 'term', content: 'Self-Efficacy' }, { id: 4, type: 'definition', content: 'An individual\'s belief in their capacity to execute behaviors necessary for specific goals.' }, ];

// --- HELPER & UI COMPONENTS ---
const StatCard = ({ icon, label, value, color }) => ( <div className="bg-slate-800/50 backdrop-blur-sm p-4 rounded-xl flex items-center space-x-4 shadow-lg border border-slate-700"> <div className={`p-3 rounded-full ${color}`}>{icon}</div> <div> <p className="text-sm text-slate-400">{label}</p> <p className="text-xl font-bold text-white">{value}</p> </div> </div> );
const ProgressBar = ({ progress, colorClass, height = 'h-2.5' }) => ( <div className={`w-full bg-slate-700 rounded-full ${height}`}> <div className={`${colorClass} ${height} rounded-full transition-all duration-500`} style={{ width: `${progress}%` }}></div> </div> );
const TodaysPlanItem = ({ item, onToggle }) => ( <div className="flex items-center p-3 rounded-lg bg-slate-700/50"> <input type="checkbox" checked={item.completed} onChange={onToggle} className="form-checkbox h-5 w-5 text-green-500 bg-slate-800 border-slate-600 rounded focus:ring-green-500 cursor-pointer" /> <p className={`ml-4 flex-grow ${item.completed ? 'line-through text-slate-400' : 'text-white'}`}>{item.task}</p> <div className="flex items-center text-sm text-slate-400"><Clock className="w-4 h-4 mr-1"/><span>{item.time} min</span></div> </div> );
const AchievementIcon = ({ achievement }) => ( <div className={`p-3 rounded-full border-2 ${achievement.unlocked ? 'bg-yellow-500/20 border-yellow-500' : 'bg-slate-700 border-slate-600'}`} title={achievement.name}> {React.cloneElement(achievement.icon, { className: `w-6 h-6 ${achievement.unlocked ? 'text-yellow-400' : 'text-slate-500'}` })} </div> );
const AchievementNotification = ({ achievement, onclose }) => { if (!achievement) return null; return ( <div className="fixed bottom-5 right-5 bg-gradient-to-br from-blue-500 to-purple-600 text-white p-4 rounded-xl shadow-2xl z-50 animate-fade-in-up"> <div className="flex items-center"> <div className="p-3 bg-white/20 rounded-full"> {React.cloneElement(achievement.icon, { className: "w-8 h-8 text-yellow-300"})} </div> <div className="ml-4"> <h3 className="font-bold text-lg">Achievement Unlocked!</h3> <p className="text-sm">{achievement.name}</p> </div> <button onClick={onclose} className="ml-4 p-1 rounded-full hover:bg-white/20 transition-colors"><XCircle className="w-5 h-5"/></button> </div> </div> ); };
const LevelUpModal = ({ level, onclose }) => { if (!level) return null; return ( <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4"> <div className="bg-slate-800 border border-purple-500/50 rounded-2xl p-8 max-w-sm w-full shadow-2xl text-center animate-fade-in"> <Sparkles className="w-16 h-16 text-yellow-400 mx-auto mb-4"/> <h2 className="text-3xl font-bold text-white mb-2">Level Up!</h2> <p className="text-slate-300 text-lg mb-6">You've reached</p> <p className="text-6xl font-bold text-purple-400 mb-8">Level {level}</p> <button onClick={onclose} className="px-8 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-500 font-semibold transition-colors">Continue</button> </div> </div> ); };

// --- VIEW COMPONENTS ---
const PlaceholderView = ({ viewName }) => ( <div className="flex items-center justify-center h-full text-center"> <div> <h1 className="text-4xl font-bold text-white mb-4">{viewName}</h1> <p className="text-slate-400">This section is under construction. Come back soon!</p> </div> </div> );
const DashboardView = ({ user, onAdjustPlan, onNavigate, onTogglePlanItem }) => ( <> <div className="mb-8 flex justify-between items-center"><div><h1 className="text-3xl font-bold text-white">Welcome back, {user.name}!</h1> <p className="text-slate-400">Let's continue your journey to NBHWC certification.</p></div><button onClick={() => onNavigate('progressReport')} className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300 bg-slate-800/50 px-4 py-2 rounded-lg border border-slate-700"><LineChart className="w-4 h-4"/><span>View Progress Report</span></button></div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"> <StatCard icon={<Flame className="w-6 h-6 text-white"/>} label="Study Streak" value={`${user.studyStreak} Days`} color="bg-orange-500" /> <StatCard icon={<Star className="w-6 h-6 text-white"/>} label="Total Points" value={user.points.toLocaleString()} color="bg-yellow-500" /> <StatCard icon={<Award className="w-6 h-6 text-white"/>} label="Current Level" value={user.level} color="bg-purple-500" /> <StatCard icon={<Target className="w-6 h-6 text-white"/>} label="Overall Mastery" value={`${user.overallProgress}%`} color="bg-teal-500" /> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"> <div className="lg:col-span-2 space-y-6"> <div className="flex justify-between items-center"> <h2 className="text-2xl font-bold text-white">Study Domains</h2> <button onClick={onAdjustPlan} className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300"> <Calendar className="w-4 h-4"/><span>Adjust Study Plan</span> </button> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> {user.domains.map(d => <DomainCard key={d.id} domain={d} onNavigate={onNavigate} isClickable={true} />)} </div> </div> <div className="space-y-8"> <div> <h2 className="text-2xl font-bold text-white mb-4">Today's Plan</h2> <div className="space-y-3"> {user.todaysPlan.map((item, i) => <TodaysPlanItem key={i} item={item} onToggle={() => onTogglePlanItem(i)} />)} </div> </div> <div> <h2 className="text-2xl font-bold text-white mb-4">Achievements</h2> <div className="flex items-center space-x-3"> {user.achievements.map((achData, i) => { const details = achievementDetails[achData.id]; if (!details) return null; return <AchievementIcon key={i} achievement={{ ...details, ...achData }} />; })} </div> </div> </div> </div> </> );
const DomainCard = ({ domain, onNavigate, isClickable }) => { const colors = { "Coaching Structure": "bg-blue-500", "Coaching Process": "bg-green-500", "Health & Wellness": "bg-yellow-500", "Ethics, Legal & Professional": "bg-red-500" }; const isMastered = domain.progress >= 100; const hoverClass = isClickable ? "hover:bg-slate-800 hover:border-blue-500 transition-all duration-300 cursor-pointer" : ""; const masteredClass = isMastered ? "border-yellow-400/50 shadow-yellow-400/10 shadow-lg animate-pulse-slow" : "border-slate-700"; return ( <div onClick={() => isClickable && onNavigate('domainDetail', domain.name)} className={`bg-slate-800/50 p-5 rounded-xl shadow-lg border ${masteredClass} ${hoverClass}`}> <div className="flex items-center justify-between mb-3"> <div className="flex items-center space-x-3"> {React.cloneElement(studyContent[domain.name]?.icon || <BookOpen />, {className: "w-6 h-6"})} <h3 className="font-bold text-white">{domain.name}</h3> </div> <span className="text-xs text-slate-400">{domain.weight}% of Exam</span> </div> <p className="text-sm text-slate-300 mb-3">Mastery: {domain.progress}%</p> <ProgressBar progress={domain.progress} colorClass={colors[domain.name]} /> </div> ); };
const QuizModeCard = ({ icon, title, description, onSelect, isGame, disabled = false }) => ( <div onClick={() => !disabled && onSelect()} className={`bg-slate-800/60 border border-slate-700 p-6 rounded-xl ${disabled ? 'opacity-50 cursor-not-allowed' : `hover:bg-slate-800 ${isGame ? 'hover:border-purple-500' : 'hover:border-blue-500'} transition-all duration-300 cursor-pointer`} shadow-lg flex flex-col`}> <div className="flex items-center space-x-4 mb-3"> {icon} <h3 className="text-xl font-bold text-white">{title}</h3> </div> <p className="text-slate-400 flex-grow">{description}</p> <button className={`mt-4 text-left font-semibold ${isGame ? 'text-purple-400 hover:text-purple-300' : 'text-blue-400 hover:text-blue-300'} flex items-center`} disabled={disabled}> {isGame ? 'Play Now' : 'Start Now'} <ArrowRight className="w-4 h-4 ml-2" /> </button> </div> );
const ReportIssueModal = ({ question, userId, db, onclose, onReportSent }) => { const [issueType, setIssueType] = useState("Incorrect Answer"); const [comment, setComment] = useState(""); const [isSending, setIsSending] = useState(false); const handleSubmitReport = async () => { if (!comment.trim()) { alert("Please provide a brief comment."); return; } setIsSending(true); try { const reportsCollection = collection(db, 'reported_questions'); await addDoc(reportsCollection, { userId, questionId: question.id, questionText: question.question, issueType, comment, timestamp: serverTimestamp(), status: 'reported' }); onReportSent(); } catch (error) { console.error("Error sending report:", error); alert("Could not send report. Please try again later."); } finally { setIsSending(false); onclose(); } }; return ( <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4"> <div className="bg-slate-800 border border-slate-700 rounded-2xl p-8 max-w-lg w-full shadow-2xl"> <h2 className="text-2xl font-bold text-white mb-2 flex items-center"><Flag className="mr-3 text-red-500"/>Report an Issue</h2> <p className="text-slate-400 mb-6">Help us improve! Let us know what's wrong with this question.</p> <div className="bg-slate-900/50 p-4 rounded-lg mb-4 italic">"{question.question}"</div> <div className="space-y-4"> <div> <label className="text-sm font-medium text-slate-300 block mb-2">Issue Type</label> <select value={issueType} onChange={(e) => setIssueType(e.target.value)} className="w-full bg-slate-700 border-slate-600 rounded-lg p-2 text-white focus:ring-blue-500 focus:border-blue-500"> <option>Incorrect Answer</option> <option>Unclear Explanation</option> <option>Typo in Question/Options</option> <option>Other</option> </select> </div> <div> <label className="text-sm font-medium text-slate-300 block mb-2">Comment</label> <textarea value={comment} onChange={(e) => setComment(e.target.value)} placeholder="Please provide a brief explanation..." rows="3" className="w-full bg-slate-700 border-slate-600 rounded-lg p-2 text-white focus:ring-blue-500 focus:border-blue-500"></textarea> </div> </div> <div className="flex justify-end space-x-4 mt-8"> <button onClick={onclose} className="px-6 py-2 rounded-lg text-white bg-slate-600 hover:bg-slate-500 transition-colors">Cancel</button> <button onClick={handleSubmitReport} disabled={isSending} className="px-6 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-500 font-semibold transition-colors flex items-center disabled:bg-slate-500"> {isSending ? <Loader2 className="w-5 h-5 animate-spin mr-2"/> : <Send className="w-5 h-5 mr-2"/>} Submit Report </button> </div> </div> </div> ); };
const QuizInterface = ({ questions, onQuizComplete, userId, db, onAnswer }) => { const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); const [selectedAnswer, setSelectedAnswer] = useState(null); const [isAnswered, setIsAnswered] = useState(false); const [score, setScore] = useState(0); const [explanationVisible, setExplanationVisible] = useState(false); const [showReportModal, setShowReportModal] = useState(false); const [reportSentMessage, setReportSentMessage] = useState(false); const currentQuestion = questions[currentQuestionIndex]; const progress = ((currentQuestionIndex + 1) / questions.length) * 100; const handleAnswerSelect = (option) => { if (isAnswered) return; setSelectedAnswer(option); }; const handleSubmit = () => { if (selectedAnswer === null) return; const isCorrect = selectedAnswer === currentQuestion.correctAnswer; setIsAnswered(true); if (isCorrect) { setScore(score + 1); } onAnswer(currentQuestion.id, isCorrect); }; const handleNextQuestion = () => { if (currentQuestionIndex < questions.length - 1) { setIsAnswered(false); setSelectedAnswer(null); setExplanationVisible(false); setCurrentQuestionIndex(currentQuestionIndex + 1); setReportSentMessage(false); } else { onQuizComplete(score, questions.length); } }; const getOptionClasses = (option) => { if (!isAnswered) { return selectedAnswer === option ? 'bg-blue-600 border-blue-500' : 'bg-slate-700/50 border-slate-600 hover:bg-slate-700'; } if (option === currentQuestion.correctAnswer) { return 'bg-green-800/60 border-green-600'; } if (option === selectedAnswer && option !== currentQuestion.correctAnswer) { return 'bg-red-800/60 border-red-600'; } return 'bg-slate-800 border-slate-700 opacity-60'; }; const handleReportSent = () => { setReportSentMessage(true); setTimeout(() => setReportSentMessage(false), 3000); }; return ( <div className="max-w-4xl mx-auto"> {showReportModal && <ReportIssueModal question={currentQuestion} userId={userId} db={db} onclose={() => setShowReportModal(false)} onReportSent={handleReportSent} />} <div className="bg-slate-800/50 border border-slate-700 rounded-2xl p-8 shadow-2xl"> <div className="mb-6"> <p className="text-sm text-blue-400 font-semibold">Question {currentQuestionIndex + 1} of {questions.length}</p> <ProgressBar progress={progress} colorClass="bg-blue-500" height="h-1.5" /> </div> <div className="flex items-start justify-between mb-8"> <h2 className="text-2xl font-bold text-white flex-grow pr-4">{currentQuestion.question}</h2> <button onClick={() => setExplanationVisible(!explanationVisible)} disabled={!isAnswered} className="p-2 rounded-full transition-colors hover:bg-slate-700 disabled:opacity-30 disabled:cursor-not-allowed" aria-label="Show explanation"> <HelpCircle className="w-6 h-6 text-blue-400" /> </button> </div> <div className="space-y-4 mb-8"> {currentQuestion.options.map((option, index) => ( <div key={index} onClick={() => handleAnswerSelect(option)} className={`p-4 rounded-lg border-2 transition-all duration-200 cursor-pointer flex items-center justify-between ${getOptionClasses(option)}`}> <span className="font-medium">{option}</span> {isAnswered && option === currentQuestion.correctAnswer && <CheckCircle className="text-green-400" />} {isAnswered && option === selectedAnswer && option !== currentQuestion.correctAnswer && <XCircle className="text-red-400" />} </div> ))} </div> {isAnswered && explanationVisible && ( <div className="bg-slate-900/70 p-5 rounded-lg mb-6 border border-slate-700 animate-fade-in"> <div className="flex justify-between items-start"> <h4 className="font-bold text-lg text-white mb-2 flex items-center"> <Lightbulb className="w-5 h-5 mr-2 text-yellow-400" /> Explanation </h4> <button onClick={() => setShowReportModal(true)} className="flex items-center text-xs text-red-400 hover:text-red-300 font-semibold"> <Flag className="w-3 h-3 mr-1"/> Report Issue </button> </div> <p className="text-slate-300 mb-4">{currentQuestion.explanation}</p> <div className="border-t border-slate-700 pt-4"> <h5 className="font-bold text-md text-white mb-1">Source(s)</h5> <a href="#" onClick={(e) => e.preventDefault()} className="text-sm text-blue-400 hover:text-blue-300 italic underline" title="In a full application, this would link to the source material."> {currentQuestion.source} </a> </div> </div> )} {reportSentMessage && <div className="text-center text-green-400 text-sm mb-4 animate-fade-in">Thank you for your feedback!</div>} <div className="flex justify-end"> {isAnswered ? ( <button onClick={handleNextQuestion} className="bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-8 rounded-lg transition-colors flex items-center"> {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'Finish Quiz'} <ArrowRight className="w-5 h-5 ml-2" /> </button> ) : ( <button onClick={handleSubmit} disabled={selectedAnswer === null} className="bg-green-600 hover:bg-green-500 text-white font-bold py-3 px-8 rounded-lg transition-colors disabled:bg-slate-600 disabled:cursor-not-allowed"> Submit </button> )} </div> </div> </div> ); };
const QuizResultsView = ({ score, total, onRestart }) => ( <div className="flex items-center justify-center h-full text-center"> <div className="bg-slate-800/50 border border-slate-700 rounded-2xl p-10 shadow-2xl"> <Trophy className="w-20 h-20 text-yellow-400 mx-auto mb-4" /> <h1 className="text-4xl font-bold text-white mb-2">Quiz Complete!</h1> <p className="text-slate-300 text-lg mb-6">You scored</p> <p className="text-6xl font-bold text-blue-400 mb-8">{score} / {total}</p> <button onClick={onRestart} className="bg-blue-600 hover:bg-blue-500 text-white font-bold py-3 px-8 rounded-lg transition-colors"> Take Another Quiz </button> </div> </div> );
const PracticeQuizzesView = ({ onQuizComplete, userId, db, onNavigate, onStartSmartReview }) => { const [quizState, setQuizState] = useState('selection'); const [score, setScore] = useState(0); const [totalQuestions, setTotalQuestions] = useState(0); const [questionsForQuiz, setQuestionsForQuiz] = useState([]); const startQuiz = () => { const shuffled = [...allMockQuestions].sort(() => 0.5 - Math.random()); setQuestionsForQuiz(shuffled.slice(0, 8)); setQuizState('active'); }; const handleQuizFinish = (finalScore, total) => { setScore(finalScore); setTotalQuestions(total); onQuizComplete(finalScore, total); setQuizState('results'); }; const restart = () => { setScore(0); setQuizState('selection'); }; if (quizState === 'active') { return <QuizInterface questions={questionsForQuiz} onQuizComplete={handleQuizFinish} userId={userId} db={db} onAnswer={(questionId, isCorrect) => onQuizComplete(0,0, {questionId, isCorrect})} />; } if (quizState === 'results') { return <QuizResultsView score={score} total={totalQuestions} onRestart={restart} />; } return ( <div> <h1 className="text-3xl font-bold text-white mb-2">Practice Modes</h1> <p className="text-slate-400 mb-8">Select a mode to test your knowledge and sharpen your skills.</p> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6"> <QuizModeCard icon={<Wand2 className="w-8 h-8 text-teal-400"/>} title="Smart Review" description="An adaptive quiz focusing on questions you've struggled with, using spaced repetition." onSelect={onStartSmartReview} /> <QuizModeCard icon={<Zap className="w-8 h-8 text-yellow-400"/>} title="Quick Review" description="A short, 8-question quiz on random topics to quickly refresh your memory." onSelect={startQuiz} /> <QuizModeCard icon={<BookCopy className="w-8 h-8 text-green-400"/>} title="Focused Practice" description="Target your weak areas. Choose a specific domain and quiz length." onSelect={startQuiz} /> <QuizModeCard icon={<Brain className="w-8 h-8 text-pink-400"/>} title="Memory Game" description="A fun, fast-paced game to match key terms with their definitions." onSelect={() => onNavigate('memoryGame')} isGame={true} /> </div> </div> ); };
const StudyDomainsView = ({ domains, onNavigate }) => ( <div> <h1 className="text-3xl font-bold text-white mb-2">Study Domains</h1> <p className="text-slate-400 mb-8">Select a domain to dive into the core content, videos, and simulations.</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> {domains.map(domain => ( <div key={domain.id} onClick={() => onNavigate('domainDetail', domain.name)} className="bg-slate-800/60 border border-slate-700 p-6 rounded-xl hover:bg-slate-800 hover:border-blue-500 transition-all duration-300 cursor-pointer shadow-lg flex flex-col"> <div className="flex items-center space-x-4 mb-4"> {studyContent[domain.name].icon} <h3 className="text-2xl font-bold text-white">{domain.name}</h3> </div> <p className="text-slate-300 mb-4">Current Mastery: {domain.progress}%</p> <ProgressBar progress={domain.progress} colorClass={`bg-${studyContent[domain.name]?.color || 'gray'}-500`} /> <div className="mt-auto pt-4 text-blue-400 font-semibold flex items-center"> Explore Topics <ChevronsRight className="w-5 h-5 ml-2" /> </div> </div> ))} </div> </div> );
const DomainDetailView = ({ domainName, onNavigate, onBack }) => { const domainData = studyContent[domainName]; if (!domainData) return <PlaceholderView viewName="Content not found" />; return ( <div> <button onClick={onBack} className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300 mb-6"> <ArrowLeft className="w-4 h-4" /> <span>Back to All Domains</span> </button> <div className="flex items-center space-x-4 mb-8"> {domainData.icon} <h1 className="text-3xl font-bold text-white">{domainName}</h1> </div> <div className="space-y-4"> {domainData.topics.length > 0 ? domainData.topics.map(topic => ( <div key={topic.id} onClick={() => onNavigate('topicDetail', domainName, topic.id)} className="bg-slate-800/50 border border-slate-700 p-5 rounded-lg hover:bg-slate-800 transition-colors cursor-pointer flex justify-between items-center"> <h3 className="text-lg font-semibold text-white">{topic.title}</h3> <ArrowRight className="text-slate-500" /> </div> )) : ( <p className="text-slate-400 text-center py-8">Content for this domain is coming soon!</p> )} </div> </div> ); };
const TopicDetailView = ({ domainName, topicId, onNavigate, onBack }) => { const topic = studyContent[domainName]?.topics.find(t => t.id === topicId); const [isEli5, setIsEli5] = useState(false); if (!topic) return <PlaceholderView viewName="Topic not found" />; return ( <div> <button onClick={onBack} className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300 mb-6"> <ArrowLeft className="w-4 h-4" /> <span>Back to {domainName}</span> </button> <h1 className="text-3xl font-bold text-white mb-6">{topic.title}</h1> <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"> <div className="lg:col-span-2 bg-slate-800/50 border border-slate-700 p-6 rounded-xl"> <div className="flex items-center justify-between mb-4"> <h2 className="text-xl font-bold text-white">Core Explanation</h2> <div className="flex items-center space-x-2 bg-slate-700 p-1 rounded-lg"> <button onClick={() => setIsEli5(false)} className={`px-3 py-1 text-sm rounded-md transition-colors ${!isEli5 ? 'bg-blue-600 text-white' : 'text-slate-300'}`}>Standard</button> <button onClick={() => setIsEli5(true)} className={`px-3 py-1 text-sm rounded-md transition-colors flex items-center space-x-1.5 ${isEli5 ? 'bg-yellow-500 text-slate-900' : 'text-slate-300'}`}><Baby className="w-4 h-4" /><span>ELI5</span></button> </div> </div> <div className="prose prose-invert max-w-none text-slate-300 leading-relaxed"> <p>{isEli5 ? topic.eli5 : topic.standard}</p> </div> </div> <div className="space-y-6"> <div className="bg-slate-800/50 border border-slate-700 p-6 rounded-xl"> <h3 className="text-lg font-bold text-white mb-3 flex items-center"><Video className="w-5 h-5 mr-2 text-red-400"/>Video Explainer</h3> <p className="text-sm text-slate-400 mb-4">Watch a short video to see this concept in action.</p> <button className="w-full bg-red-600/80 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">Watch Video</button> </div> <div className="bg-slate-800/50 border border-slate-700 p-6 rounded-xl"> <h3 className="text-lg font-bold text-white mb-3 flex items-center"><Gamepad2 className="w-5 h-5 mr-2 text-purple-400"/>Interactive Scenario</h3> <p className="text-sm text-slate-400 mb-4">Test your skills in a choose-your-own-adventure simulation.</p> <button onClick={() => topic.simulationId && onNavigate('simulation', domainName, topic.simulationId)} className="w-full bg-purple-600/80 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:opacity-50" disabled={!topic.simulationId}>Start Simulation</button> </div> </div> </div> </div> ); };
const LoadingView = () => ( <div className="flex flex-col items-center justify-center h-full text-center"> <Loader2 className="w-16 h-16 text-blue-500 animate-spin mb-4" /> <h1 className="text-2xl font-bold text-white">Loading Your Profile...</h1> <p className="text-slate-400">Syncing your progress from the cloud.</p> </div> );
const LeaderboardView = ({ db, currentUserId }) => { const [leaderboard, setLeaderboard] = useState([]); const [isLoading, setIsLoading] = useState(true); useEffect(() => { if (!db) return; const fetchLeaderboard = async () => { setIsLoading(true); try { const leaderboardCol = collection(db, 'leaderboard'); const q = query(leaderboardCol, orderBy('points', 'desc'), limit(20)); const querySnapshot = await getDocs(q); const leaders = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); setLeaderboard(leaders); } catch (error) { console.error("Error fetching leaderboard:", error); } finally { setIsLoading(false); } }; fetchLeaderboard(); }, [db]); const getRankColor = (rank) => { if (rank === 1) return 'text-yellow-400'; if (rank === 2) return 'text-slate-300'; if (rank === 3) return 'text-yellow-600'; return 'text-slate-400'; }; return ( <div> <h1 className="text-3xl font-bold text-white mb-2 flex items-center"><Trophy className="mr-3 text-yellow-400"/>Leaderboard</h1> <p className="text-slate-400 mb-8">See how you stack up against other top students.</p> {isLoading ? ( <LoadingView /> ) : ( <div className="bg-slate-800/50 border border-slate-700 rounded-xl"> <ul className="divide-y divide-slate-700"> {leaderboard.map((user, index) => { const rank = index + 1; const isCurrentUser = user.id === currentUserId; return ( <li key={user.id} className={`p-4 flex items-center justify-between transition-colors ${isCurrentUser ? 'bg-blue-600/20' : ''}`}> <div className="flex items-center"> <div className={`w-10 text-center text-xl font-bold ${getRankColor(rank)}`}> {rank === 1 ? <Crown className="mx-auto text-yellow-400"/> : rank} </div> <div className="ml-4"> <p className={`font-bold ${isCurrentUser ? 'text-blue-300' : 'text-white'}`}>{user.name}</p> <p className="text-sm text-slate-400">Level {user.level}</p> </div> </div> <div className="text-lg font-bold text-white">{user.points.toLocaleString()} pts</div> </li> ); })} </ul> </div> )} </div> ); };
const SettingsView = ({ user, onUpdateName, onResetAccount, appSettings, onToggleNotifications }) => { const [name, setName] = useState(user.name); const [showResetConfirm, setShowResetConfirm] = useState(false); const handleSave = () => { if (name.trim() && name !== user.name) { onUpdateName(name.trim()); } }; const handleExport = () => { alert("Data export feature coming soon!"); }; const ResetConfirmModal = () => ( <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4"> <div className="bg-slate-800 border border-red-500/50 rounded-2xl p-8 max-w-lg w-full shadow-2xl"> <h2 className="text-2xl font-bold text-red-400 mb-2 flex items-center"><AlertTriangle className="mr-3"/>Confirm Account Reset</h2> <p className="text-slate-400 mb-6">Are you absolutely sure? All of your progress, points, and achievements will be permanently deleted. This action cannot be undone.</p> <div className="flex justify-end space-x-4 mt-8"> <button onClick={() => setShowResetConfirm(false)} className="px-6 py-2 rounded-lg text-white bg-slate-600 hover:bg-slate-500 transition-colors">Cancel</button> <button onClick={() => { onResetAccount(); setShowResetConfirm(false); }} className="px-6 py-2 rounded-lg text-white bg-red-600 hover:bg-red-500 font-semibold transition-colors">Yes, Reset My Account</button> </div> </div> </div> ); return ( <div> {showResetConfirm && <ResetConfirmModal />} <h1 className="text-3xl font-bold text-white mb-8">Settings</h1> <div className="space-y-10"> <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6"> <h2 className="text-xl font-bold text-white mb-4 flex items-center"><User className="mr-3 text-blue-400"/> Profile</h2> <div className="max-w-md"> <label htmlFor="name" className="block text-sm font-medium text-slate-300 mb-2">Display Name</label> <div className="flex items-center space-x-3"> <input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} className="flex-grow bg-slate-700 border-slate-600 rounded-lg p-2 text-white focus:ring-blue-500 focus:border-blue-500" /> <button onClick={handleSave} className="px-6 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-500 font-semibold transition-colors">Save</button> </div> </div> </div> <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6"> <h2 className="text-xl font-bold text-white mb-4 flex items-center"><Bell className="mr-3 text-green-400"/> Notifications</h2> <div className="flex items-center justify-between"> <p className="text-slate-300">Show achievement notifications</p> <label className="relative inline-flex items-center cursor-pointer"> <input type="checkbox" checked={appSettings.showNotifications} onChange={onToggleNotifications} className="sr-only peer" /> <div className="w-11 h-6 bg-slate-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div> </label> </div> </div> <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6"> <h2 className="text-xl font-bold text-white mb-4 flex items-center"><Heart className="mr-3 text-pink-400"/> Support the Platform</h2> <p className="text-slate-400 mb-4">Enjoying this study tool? Consider supporting its development.</p> <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top"> <input type="hidden" name="cmd" value="_donations" /> <input type="hidden" name="business" value="zacharyjones13@gmail.com" /> <input type="hidden" name="item_name" value="Support for NBHWC Study Platform" /> <input type="hidden" name="currency_code" value="USD" /> <button type="submit" className="w-full md:w-auto flex-1 text-center px-6 py-2 rounded-lg text-white bg-pink-600/80 hover:bg-pink-600 font-semibold transition-colors flex items-center justify-center"> <Coffee className="w-5 h-5 mr-2"/> Buy me a coffee </button> </form> </div> <div className="bg-red-900/30 border border-red-500/50 rounded-xl p-6"> <h2 className="text-xl font-bold text-red-400 mb-4 flex items-center"><AlertTriangle className="mr-3"/> Danger Zone</h2> <div className="flex items-center justify-between"> <div> <p className="font-semibold text-white">Reset Account</p> <p className="text-sm text-slate-400">Permanently delete all your progress.</p> </div> <button onClick={() => setShowResetConfirm(true)} className="px-6 py-2 rounded-lg text-white bg-red-600 hover:bg-red-500 font-semibold transition-colors">Reset</button> </div> </div> </div> </div> ); };
const SimulationView = ({ simulationId, onBack }) => { const simulation = simulations[simulationId]; const [currentNodeKey, setCurrentNodeKey] = useState(simulation.initial); const [outcome, setOutcome] = useState(null); const handleChoice = (target) => { const nextNode = simulation.nodes[target]; if (nextNode.outcome) { setOutcome(nextNode.outcome); } else { setCurrentNodeKey(target); } }; const handleOutcomeNext = (target) => { setCurrentNodeKey(target); setOutcome(null); }; const currentNode = simulation.nodes[currentNodeKey]; const isEndNode = !currentNode.choices && !currentNode.outcome; const outcomeColors = { incorrect: 'border-red-500/50 bg-red-900/30', good: 'border-yellow-500/50 bg-yellow-900/30', best: 'border-green-500/50 bg-green-900/30', }; return ( <div> <button onClick={onBack} className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300 mb-6"> <ArrowLeft className="w-4 h-4" /> <span>Back to Topic</span> </button> <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-8 max-w-3xl mx-auto"> <h1 className="text-2xl font-bold text-white mb-4">{simulation.title}</h1> <div className="prose prose-invert max-w-none text-slate-300 leading-relaxed mb-8"> <p>{currentNode.text}</p> </div> {outcome && ( <div className={`p-5 rounded-lg border mb-6 ${outcomeColors[outcome.type]}`}> <h3 className={`text-lg font-bold mb-2 ${outcome.type === 'incorrect' ? 'text-red-400' : outcome.type === 'good' ? 'text-yellow-400' : 'text-green-400'}`}>{outcome.title}</h3> <p className="text-slate-300">{outcome.feedback}</p> <button onClick={() => handleOutcomeNext(outcome.next.target)} className="mt-4 px-4 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-500 font-semibold transition-colors">{outcome.next.text}</button> </div> )} {!outcome && !isEndNode && ( <div className="space-y-4"> {currentNode.choices.map((choice, index) => ( <button key={index} onClick={() => handleChoice(choice.target)} className="w-full text-left p-4 rounded-lg bg-slate-700/50 hover:bg-slate-700 border border-slate-600 transition-colors"> {choice.text} </button> ))} </div> )} {isEndNode && ( <button onClick={onBack} className="w-full p-4 rounded-lg bg-blue-600 hover:bg-blue-500 font-semibold transition-colors"> Finish Simulation </button> )} </div> </div> ); };
const MemoryGameView = ({ onBack }) => { const [cards, setCards] = useState([]); const [flipped, setFlipped] = useState([]); const [matched, setMatched] = useState([]); const [moves, setMoves] = useState(0); const initializeGame = () => { const shuffledCards = [...memoryGameTerms, ...memoryGameTerms] .sort(() => Math.random() - 0.5) .map((card, index) => ({ ...card, key: index })); setCards(shuffledCards); setFlipped([]); setMatched([]); setMoves(0); }; useEffect(() => { initializeGame(); }, []); const handleFlip = (index) => { if (flipped.length === 2 || flipped.includes(index) || matched.includes(cards[index].id)) { return; } setFlipped([...flipped, index]); }; useEffect(() => { if (flipped.length === 2) { setMoves(moves + 1); const [firstIndex, secondIndex] = flipped; if (cards[firstIndex].id === cards[secondIndex].id) { setMatched([...matched, cards[firstIndex].id]); } setTimeout(() => setFlipped([]), 1200); } }, [flipped]); const isGameWon = matched.length === memoryGameTerms.length; return ( <div> <div className="flex justify-between items-center mb-6"> <div> <h1 className="text-3xl font-bold text-white">Memory Game</h1> <p className="text-slate-400">Match the terms with their definitions!</p> </div> <div className="text-right"> <p className="text-slate-400 text-lg">Moves</p> <p className="text-2xl font-bold text-white">{moves}</p> </div> </div> {isGameWon ? ( <div className="text-center bg-slate-800/50 border border-green-500/50 rounded-xl p-10"> <Sparkles className="w-16 h-16 text-yellow-400 mx-auto mb-4" /> <h2 className="text-3xl font-bold text-white mb-2">Congratulations!</h2> <p className="text-slate-300 mb-6">You matched all the pairs in {moves} moves.</p> <button onClick={initializeGame} className="px-6 py-2 rounded-lg text-white bg-blue-600 hover:bg-blue-500 font-semibold transition-colors flex items-center mx-auto"> <Repeat className="w-5 h-5 mr-2"/> Play Again </button> </div> ) : ( <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> {cards.map((card, index) => { const isFlipped = flipped.includes(index) || matched.includes(card.id); return ( <div key={index} className="aspect-video cursor-pointer" onClick={() => handleFlip(index)}> <div className={`w-full h-full rounded-lg shadow-lg transition-transform duration-500 flex items-center justify-center p-4 text-center ${isFlipped ? 'bg-slate-700' : 'bg-blue-600 hover:bg-blue-500'}`} style={{ transform: isFlipped ? 'rotateY(180deg)' : '' }}> <div className="transition-opacity duration-300" style={{ opacity: isFlipped ? 1 : 0, transform: 'rotateY(180deg)' }}> <p className={`font-semibold ${card.type === 'term' ? 'text-xl text-white' : 'text-sm text-slate-300'}`}>{card.content}</p> </div> </div> </div> ); })} </div> )} <button onClick={onBack} className="mt-8 flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300"> <ArrowLeft className="w-4 h-4" /> <span>Back to Practice Modes</span> </button> </div> ); };
const ProgressReportView = ({ user }) => { const chartData = user.domains.map(d => ({ name: d.name.split(' ')[0], Mastery: d.progress, fill: studyContent[d.name]?.color ? `var(--color-${studyContent[d.name].color})` : '#8884d8' })); return ( <div> <h1 className="text-3xl font-bold text-white mb-2 flex items-center"><LineChart className="mr-3 text-blue-400"/>Progress Report</h1> <p className="text-slate-400 mb-8">Visualize your mastery across all study domains.</p> <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6"> <h2 className="text-xl font-bold text-white mb-6">Domain Mastery (%)</h2> <div style={{ width: '100%', height: 300 }}> <ResponsiveContainer> <BarChart data={chartData} margin={{ top: 5, right: 20, left: -10, bottom: 5, }} > <CartesianGrid strokeDasharray="3 3" stroke="#475569" /> <XAxis dataKey="name" stroke="#94a3b8" /> <YAxis stroke="#94a3b8" /> <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #334155', color: '#e2e8f0' }} cursor={{fill: 'rgba(148, 163, 184, 0.1)'}} /> <Legend /> <Bar dataKey="Mastery" fill="#8884d8" /> </BarChart> </ResponsiveContainer> </div> </div> </div> ); };

// --- MAIN APP COMPONENT ---
export default function App() {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [userData, setUserData] = useState(null);
  const [showTimelineModal, setShowTimelineModal] = useState(false);
  const [viewState, setViewState] = useState({ view: 'Dashboard', domain: null, topic: null });
  const [newlyUnlockedAchievement, setNewlyUnlockedAchievement] = useState(null);
  const [levelUpInfo, setLevelUpInfo] = useState(null);
  const [appSettings, setAppSettings] = useState({ showNotifications: true });
  const [srsQuiz, setSrsQuiz] = useState(null);
};
